// Code generated by mockery v2.28.2. DO NOT EDIT.

package mocks

import (
	domains "robinhood-assignment/internal/core/domains"

	jwt "github.com/golang-jwt/jwt/v5"

	mock "github.com/stretchr/testify/mock"
)

// MyJWT is an autogenerated mock type for the MyJWT type
type MyJWT struct {
	mock.Mock
}

// NewWithClaims provides a mock function with given fields: method, claims, opts
func (_m *MyJWT) NewWithClaims(method jwt.SigningMethod, claims domains.Claims, opts ...jwt.TokenOption) *jwt.Token {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, method, claims)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *jwt.Token
	if rf, ok := ret.Get(0).(func(jwt.SigningMethod, domains.Claims, ...jwt.TokenOption) *jwt.Token); ok {
		r0 = rf(method, claims, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jwt.Token)
		}
	}

	return r0
}

// ParseWithClaims provides a mock function with given fields: tokenString, claims, keyFunc, opts
func (_m *MyJWT) ParseWithClaims(tokenString string, claims jwt.Claims, keyFunc jwt.Keyfunc, opts ...jwt.ParserOption) (*jwt.Token, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, tokenString, claims, keyFunc)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *jwt.Token
	var r1 error
	if rf, ok := ret.Get(0).(func(string, jwt.Claims, jwt.Keyfunc, ...jwt.ParserOption) (*jwt.Token, error)); ok {
		return rf(tokenString, claims, keyFunc, opts...)
	}
	if rf, ok := ret.Get(0).(func(string, jwt.Claims, jwt.Keyfunc, ...jwt.ParserOption) *jwt.Token); ok {
		r0 = rf(tokenString, claims, keyFunc, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jwt.Token)
		}
	}

	if rf, ok := ret.Get(1).(func(string, jwt.Claims, jwt.Keyfunc, ...jwt.ParserOption) error); ok {
		r1 = rf(tokenString, claims, keyFunc, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMyJWT interface {
	mock.TestingT
	Cleanup(func())
}

// NewMyJWT creates a new instance of MyJWT. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMyJWT(t mockConstructorTestingTNewMyJWT) *MyJWT {
	mock := &MyJWT{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
