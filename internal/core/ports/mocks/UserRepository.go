// Code generated by mockery v2.28.2. DO NOT EDIT.

package mocks

import (
	context "context"
	domains "robinhood-assignment/internal/core/domains"

	mock "github.com/stretchr/testify/mock"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, params
func (_m *UserRepository) Create(ctx context.Context, params *domains.CreateUserParams) (*domains.User, error) {
	ret := _m.Called(ctx, params)

	var r0 *domains.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domains.CreateUserParams) (*domains.User, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domains.CreateUserParams) *domains.User); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domains.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domains.CreateUserParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx, id
func (_m *UserRepository) Get(ctx context.Context, id primitive.ObjectID) (*domains.User, error) {
	ret := _m.Called(ctx, id)

	var r0 *domains.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) (*domains.User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) *domains.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domains.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUsername provides a mock function with given fields: ctx, username
func (_m *UserRepository) GetByUsername(ctx context.Context, username string) (*domains.User, error) {
	ret := _m.Called(ctx, username)

	var r0 *domains.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domains.User, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domains.User); ok {
		r0 = rf(ctx, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domains.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUserRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserRepository(t mockConstructorTestingTNewUserRepository) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
