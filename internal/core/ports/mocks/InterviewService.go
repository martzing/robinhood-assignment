// Code generated by mockery v2.28.2. DO NOT EDIT.

package mocks

import (
	context "context"
	domains "robinhood-assignment/internal/core/domains"
	dto "robinhood-assignment/internal/dto"

	mock "github.com/stretchr/testify/mock"
)

// InterviewService is an autogenerated mock type for the InterviewService type
type InterviewService struct {
	mock.Mock
}

// AddInterviewComment provides a mock function with given fields: ctx, req
func (_m *InterviewService) AddInterviewComment(ctx context.Context, req *dto.AddInterviewCommentRequest) error {
	ret := _m.Called(ctx, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.AddInterviewCommentRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ArchiveInterviewAppointment provides a mock function with given fields: ctx, id
func (_m *InterviewService) ArchiveInterviewAppointment(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateInterviewAppointment provides a mock function with given fields: ctx, req
func (_m *InterviewService) CreateInterviewAppointment(ctx context.Context, req *dto.CreateInterviewAppointmentRequest) (*domains.InterviewAppointment, error) {
	ret := _m.Called(ctx, req)

	var r0 *domains.InterviewAppointment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.CreateInterviewAppointmentRequest) (*domains.InterviewAppointment, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.CreateInterviewAppointmentRequest) *domains.InterviewAppointment); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domains.InterviewAppointment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.CreateInterviewAppointmentRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInterviewAppointment provides a mock function with given fields: ctx, id
func (_m *InterviewService) GetInterviewAppointment(ctx context.Context, id string) (*domains.InterviewAppointment, error) {
	ret := _m.Called(ctx, id)

	var r0 *domains.InterviewAppointment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domains.InterviewAppointment, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domains.InterviewAppointment); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domains.InterviewAppointment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInterviewAppointments provides a mock function with given fields: ctx, offset, limit
func (_m *InterviewService) GetInterviewAppointments(ctx context.Context, offset uint32, limit uint32) ([]domains.InterviewAppointment, error) {
	ret := _m.Called(ctx, offset, limit)

	var r0 []domains.InterviewAppointment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint32) ([]domains.InterviewAppointment, error)); ok {
		return rf(ctx, offset, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint32) []domains.InterviewAppointment); ok {
		r0 = rf(ctx, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domains.InterviewAppointment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint32, uint32) error); ok {
		r1 = rf(ctx, offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateInterviewAppointment provides a mock function with given fields: ctx, req
func (_m *InterviewService) UpdateInterviewAppointment(ctx context.Context, req *dto.UpdateInterviewAppointmentRequest) error {
	ret := _m.Called(ctx, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.UpdateInterviewAppointmentRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateInterviewComment provides a mock function with given fields: ctx, req
func (_m *InterviewService) UpdateInterviewComment(ctx context.Context, req *dto.UpdateInterviewCommentRequest) error {
	ret := _m.Called(ctx, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.UpdateInterviewCommentRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewInterviewService interface {
	mock.TestingT
	Cleanup(func())
}

// NewInterviewService creates a new instance of InterviewService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewInterviewService(t mockConstructorTestingTNewInterviewService) *InterviewService {
	mock := &InterviewService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
