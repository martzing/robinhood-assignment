// Code generated by mockery v2.28.2. DO NOT EDIT.

package mocks

import (
	context "context"
	domains "robinhood-assignment/internal/core/domains"

	mock "github.com/stretchr/testify/mock"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// InterviewAppointmentRepository is an autogenerated mock type for the InterviewAppointmentRepository type
type InterviewAppointmentRepository struct {
	mock.Mock
}

// AddComment provides a mock function with given fields: ctx, params
func (_m *InterviewAppointmentRepository) AddComment(ctx context.Context, params *domains.AddInterviewCommentParams) error {
	ret := _m.Called(ctx, params)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domains.AddInterviewCommentParams) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ArchiveInterviewAppointment provides a mock function with given fields: ctx, id
func (_m *InterviewAppointmentRepository) ArchiveInterviewAppointment(ctx context.Context, id primitive.ObjectID) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields: ctx, params
func (_m *InterviewAppointmentRepository) Create(ctx context.Context, params *domains.CreateInterviewAppointmentParams) (*domains.CreateInterviewAppointment, error) {
	ret := _m.Called(ctx, params)

	var r0 *domains.CreateInterviewAppointment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domains.CreateInterviewAppointmentParams) (*domains.CreateInterviewAppointment, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domains.CreateInterviewAppointmentParams) *domains.CreateInterviewAppointment); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domains.CreateInterviewAppointment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domains.CreateInterviewAppointmentParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx, id
func (_m *InterviewAppointmentRepository) Get(ctx context.Context, id primitive.ObjectID) (*domains.InterviewAppointment, error) {
	ret := _m.Called(ctx, id)

	var r0 *domains.InterviewAppointment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) (*domains.InterviewAppointment, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) *domains.InterviewAppointment); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domains.InterviewAppointment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: ctx, offset, limit
func (_m *InterviewAppointmentRepository) GetAll(ctx context.Context, offset uint32, limit uint32) ([]domains.InterviewAppointment, error) {
	ret := _m.Called(ctx, offset, limit)

	var r0 []domains.InterviewAppointment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint32) ([]domains.InterviewAppointment, error)); ok {
		return rf(ctx, offset, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint32) []domains.InterviewAppointment); ok {
		r0 = rf(ctx, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domains.InterviewAppointment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint32, uint32) error); ok {
		r1 = rf(ctx, offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, params
func (_m *InterviewAppointmentRepository) Update(ctx context.Context, params *domains.UpdateInterviewAppointmentParams) (*domains.InterviewAppointment, error) {
	ret := _m.Called(ctx, params)

	var r0 *domains.InterviewAppointment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domains.UpdateInterviewAppointmentParams) (*domains.InterviewAppointment, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domains.UpdateInterviewAppointmentParams) *domains.InterviewAppointment); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domains.InterviewAppointment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domains.UpdateInterviewAppointmentParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateComment provides a mock function with given fields: ctx, params
func (_m *InterviewAppointmentRepository) UpdateComment(ctx context.Context, params *domains.UpdateInterviewCommentParams) error {
	ret := _m.Called(ctx, params)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domains.UpdateInterviewCommentParams) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewInterviewAppointmentRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewInterviewAppointmentRepository creates a new instance of InterviewAppointmentRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewInterviewAppointmentRepository(t mockConstructorTestingTNewInterviewAppointmentRepository) *InterviewAppointmentRepository {
	mock := &InterviewAppointmentRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
