// Code generated by mockery v2.28.2. DO NOT EDIT.

package mocks

import (
	dto "robinhood-assignment/internal/dto"

	gin "github.com/gin-gonic/gin"

	mock "github.com/stretchr/testify/mock"
)

// InterviewValidate is an autogenerated mock type for the InterviewValidate type
type InterviewValidate struct {
	mock.Mock
}

// ValidateAddInterviewComment provides a mock function with given fields: ctx
func (_m *InterviewValidate) ValidateAddInterviewComment(ctx *gin.Context) (*dto.AddInterviewCommentRequest, error) {
	ret := _m.Called(ctx)

	var r0 *dto.AddInterviewCommentRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context) (*dto.AddInterviewCommentRequest, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context) *dto.AddInterviewCommentRequest); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.AddInterviewCommentRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateArchiveInterviewAppointment provides a mock function with given fields: ctx
func (_m *InterviewValidate) ValidateArchiveInterviewAppointment(ctx *gin.Context) (string, error) {
	ret := _m.Called(ctx)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context) (string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context) string); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*gin.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateCreateInterviewAppointment provides a mock function with given fields: ctx
func (_m *InterviewValidate) ValidateCreateInterviewAppointment(ctx *gin.Context) (*dto.CreateInterviewAppointmentRequest, error) {
	ret := _m.Called(ctx)

	var r0 *dto.CreateInterviewAppointmentRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context) (*dto.CreateInterviewAppointmentRequest, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context) *dto.CreateInterviewAppointmentRequest); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.CreateInterviewAppointmentRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateGetInterviewAppointment provides a mock function with given fields: ctx
func (_m *InterviewValidate) ValidateGetInterviewAppointment(ctx *gin.Context) (string, error) {
	ret := _m.Called(ctx)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context) (string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context) string); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*gin.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateGetInterviewAppointments provides a mock function with given fields: ctx
func (_m *InterviewValidate) ValidateGetInterviewAppointments(ctx *gin.Context) (*dto.GetInterviewAppointmentsRequest, error) {
	ret := _m.Called(ctx)

	var r0 *dto.GetInterviewAppointmentsRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context) (*dto.GetInterviewAppointmentsRequest, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context) *dto.GetInterviewAppointmentsRequest); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.GetInterviewAppointmentsRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateUpdateInterviewAppointment provides a mock function with given fields: ctx
func (_m *InterviewValidate) ValidateUpdateInterviewAppointment(ctx *gin.Context) (*dto.UpdateInterviewAppointmentRequest, error) {
	ret := _m.Called(ctx)

	var r0 *dto.UpdateInterviewAppointmentRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context) (*dto.UpdateInterviewAppointmentRequest, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context) *dto.UpdateInterviewAppointmentRequest); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.UpdateInterviewAppointmentRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateUpdateInterviewComment provides a mock function with given fields: ctx
func (_m *InterviewValidate) ValidateUpdateInterviewComment(ctx *gin.Context) (*dto.UpdateInterviewCommentRequest, error) {
	ret := _m.Called(ctx)

	var r0 *dto.UpdateInterviewCommentRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context) (*dto.UpdateInterviewCommentRequest, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context) *dto.UpdateInterviewCommentRequest); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.UpdateInterviewCommentRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewInterviewValidate interface {
	mock.TestingT
	Cleanup(func())
}

// NewInterviewValidate creates a new instance of InterviewValidate. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewInterviewValidate(t mockConstructorTestingTNewInterviewValidate) *InterviewValidate {
	mock := &InterviewValidate{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
